// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vidconf.proto

#ifndef PROTOBUF_vidconf_2eproto__INCLUDED
#define PROTOBUF_vidconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace VidConf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_vidconf_2eproto();
void protobuf_AssignDesc_vidconf_2eproto();
void protobuf_ShutdownFile_vidconf_2eproto();

class VidCamera;
class VidCameraId;
class VidCameraList;
class VidClientConf;
class VidEmap;
class VidEmapCamera;
class VidEmapList;
class VidGroup;
class VidGroupList;
class VidHDFSConf;
class VidStor;
class VidStorList;
class VidStorServerConf;
class VidUser;
class VidUserList;
class VidView;
class VidViewList;
class VidViewWindow;

enum CameraType {
  VID_0 = 0,
  VID_USB = 1,
  VID_FILE = 2,
  VID_RTSP = 3,
  VID_ONVIF_S = 4,
  VID_GB28181 = 5,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraType_IsValid(int value);
const CameraType CameraType_MIN = VID_0;
const CameraType CameraType_MAX = VID_GB28181;
const int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraType_descriptor();
inline const ::std::string& CameraType_Name(CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraType_descriptor(), value);
}
inline bool CameraType_Parse(
    const ::std::string& name, CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum CameraConnectType {
  VID_CONNECT_0 = 0,
  VID_CONNECT_TCP = 1,
  VID_CONNECT_UDP = 2,
  CameraConnectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraConnectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraConnectType_IsValid(int value);
const CameraConnectType CameraConnectType_MIN = VID_CONNECT_0;
const CameraConnectType CameraConnectType_MAX = VID_CONNECT_UDP;
const int CameraConnectType_ARRAYSIZE = CameraConnectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraConnectType_descriptor();
inline const ::std::string& CameraConnectType_Name(CameraConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraConnectType_descriptor(), value);
}
inline bool CameraConnectType_Parse(
    const ::std::string& name, CameraConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraConnectType>(
    CameraConnectType_descriptor(), name, value);
}
enum VidLanguage {
  LANG_AUTO = 0,
  EN = 1,
  ZH_CN = 2,
  VidLanguage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidLanguage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VidLanguage_IsValid(int value);
const VidLanguage VidLanguage_MIN = LANG_AUTO;
const VidLanguage VidLanguage_MAX = ZH_CN;
const int VidLanguage_ARRAYSIZE = VidLanguage_MAX + 1;

const ::google::protobuf::EnumDescriptor* VidLanguage_descriptor();
inline const ::std::string& VidLanguage_Name(VidLanguage value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidLanguage_descriptor(), value);
}
inline bool VidLanguage_Parse(
    const ::std::string& name, VidLanguage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidLanguage>(
    VidLanguage_descriptor(), name, value);
}
enum VidLayout {
  VID_LAYOUT_MODE_0 = 0,
  VID_LAYOUT_MODE_1 = 1,
  VID_LAYOUT_MODE_2X2 = 2,
  VID_LAYOUT_MODE_3X3 = 3,
  VID_LAYOUT_MODE_4X4 = 4,
  VID_LAYOUT_MODE_6 = 5,
  VID_LAYOUT_MODE_8 = 6,
  VID_LAYOUT_MODE_12p1 = 7,
  VID_LAYOUT_MODE_5x5 = 8,
  VID_LAYOUT_MODE_6x6 = 9,
  VID_LAYOUT_MODE_8x8 = 10,
  VID_LAYOUT_MODE_ONE = 11,
  VID_LAYOUT_MODE_1x3 = 12,
  VID_LAYOUT_MODE_1p6 = 13,
  VidLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VidLayout_IsValid(int value);
const VidLayout VidLayout_MIN = VID_LAYOUT_MODE_0;
const VidLayout VidLayout_MAX = VID_LAYOUT_MODE_1p6;
const int VidLayout_ARRAYSIZE = VidLayout_MAX + 1;

const ::google::protobuf::EnumDescriptor* VidLayout_descriptor();
inline const ::std::string& VidLayout_Name(VidLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidLayout_descriptor(), value);
}
inline bool VidLayout_Parse(
    const ::std::string& name, VidLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidLayout>(
    VidLayout_descriptor(), name, value);
}
// ===================================================================

class VidUser : public ::google::protobuf::Message {
 public:
  VidUser();
  virtual ~VidUser();

  VidUser(const VidUser& from);

  inline VidUser& operator=(const VidUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidUser& default_instance();

  void Swap(VidUser* other);

  // implements Message ----------------------------------------------

  inline VidUser* New() const { return New(NULL); }

  VidUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidUser& from);
  void MergeFrom(const VidUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // optional string strPasswd = 3;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 3;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // optional string strRoleId = 4;
  void clear_strroleid();
  static const int kStrRoleIdFieldNumber = 4;
  const ::std::string& strroleid() const;
  void set_strroleid(const ::std::string& value);
  void set_strroleid(const char* value);
  void set_strroleid(const char* value, size_t size);
  ::std::string* mutable_strroleid();
  ::std::string* release_strroleid();
  void set_allocated_strroleid(::std::string* strroleid);

  // @@protoc_insertion_point(class_scope:VidConf.VidUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr strroleid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidUser* default_instance_;
};
// -------------------------------------------------------------------

class VidUserList : public ::google::protobuf::Message {
 public:
  VidUserList();
  virtual ~VidUserList();

  VidUserList(const VidUserList& from);

  inline VidUserList& operator=(const VidUserList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidUserList& default_instance();

  void Swap(VidUserList* other);

  // implements Message ----------------------------------------------

  inline VidUserList* New() const { return New(NULL); }

  VidUserList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidUserList& from);
  void MergeFrom(const VidUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidUserList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidUser cVidUser = 1;
  int cviduser_size() const;
  void clear_cviduser();
  static const int kCVidUserFieldNumber = 1;
  const ::VidConf::VidUser& cviduser(int index) const;
  ::VidConf::VidUser* mutable_cviduser(int index);
  ::VidConf::VidUser* add_cviduser();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidUser >*
      mutable_cviduser();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidUser >&
      cviduser() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidUserList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidUser > cviduser_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidUserList* default_instance_;
};
// -------------------------------------------------------------------

class VidStorServerConf : public ::google::protobuf::Message {
 public:
  VidStorServerConf();
  virtual ~VidStorServerConf();

  VidStorServerConf(const VidStorServerConf& from);

  inline VidStorServerConf& operator=(const VidStorServerConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStorServerConf& default_instance();

  void Swap(VidStorServerConf* other);

  // implements Message ----------------------------------------------

  inline VidStorServerConf* New() const { return New(NULL); }

  VidStorServerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidStorServerConf& from);
  void MergeFrom(const VidStorServerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidStorServerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nOapiPort = 1;
  void clear_noapiport();
  static const int kNOapiPortFieldNumber = 1;
  ::google::protobuf::int32 noapiport() const;
  void set_noapiport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidConf.VidStorServerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 noapiport_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidStorServerConf* default_instance_;
};
// -------------------------------------------------------------------

class VidCamera : public ::google::protobuf::Message {
 public:
  VidCamera();
  virtual ~VidCamera();

  VidCamera(const VidCamera& from);

  inline VidCamera& operator=(const VidCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCamera& default_instance();

  void Swap(VidCamera* other);

  // implements Message ----------------------------------------------

  inline VidCamera* New() const { return New(NULL); }

  VidCamera* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidCamera& from);
  void MergeFrom(const VidCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidCamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // optional .VidConf.CameraType nType = 3;
  void clear_ntype();
  static const int kNTypeFieldNumber = 3;
  ::VidConf::CameraType ntype() const;
  void set_ntype(::VidConf::CameraType value);

  // optional string strIP = 4;
  void clear_strip();
  static const int kStrIPFieldNumber = 4;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // optional string strPort = 5;
  void clear_strport();
  static const int kStrPortFieldNumber = 5;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // optional string strUser = 6;
  void clear_struser();
  static const int kStrUserFieldNumber = 6;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // optional string strPasswd = 7;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 7;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // optional string strONVIFAddress = 8;
  void clear_stronvifaddress();
  static const int kStrONVIFAddressFieldNumber = 8;
  const ::std::string& stronvifaddress() const;
  void set_stronvifaddress(const ::std::string& value);
  void set_stronvifaddress(const char* value);
  void set_stronvifaddress(const char* value, size_t size);
  ::std::string* mutable_stronvifaddress();
  ::std::string* release_stronvifaddress();
  void set_allocated_stronvifaddress(::std::string* stronvifaddress);

  // optional bool bProfileToken = 9;
  void clear_bprofiletoken();
  static const int kBProfileTokenFieldNumber = 9;
  bool bprofiletoken() const;
  void set_bprofiletoken(bool value);

  // optional string strProfileToken1 = 10;
  void clear_strprofiletoken1();
  static const int kStrProfileToken1FieldNumber = 10;
  const ::std::string& strprofiletoken1() const;
  void set_strprofiletoken1(const ::std::string& value);
  void set_strprofiletoken1(const char* value);
  void set_strprofiletoken1(const char* value, size_t size);
  ::std::string* mutable_strprofiletoken1();
  ::std::string* release_strprofiletoken1();
  void set_allocated_strprofiletoken1(::std::string* strprofiletoken1);

  // optional string strProfileToken2 = 11;
  void clear_strprofiletoken2();
  static const int kStrProfileToken2FieldNumber = 11;
  const ::std::string& strprofiletoken2() const;
  void set_strprofiletoken2(const ::std::string& value);
  void set_strprofiletoken2(const char* value);
  void set_strprofiletoken2(const char* value, size_t size);
  ::std::string* mutable_strprofiletoken2();
  ::std::string* release_strprofiletoken2();
  void set_allocated_strprofiletoken2(::std::string* strprofiletoken2);

  // optional string strFile = 12;
  void clear_strfile();
  static const int kStrFileFieldNumber = 12;
  const ::std::string& strfile() const;
  void set_strfile(const ::std::string& value);
  void set_strfile(const char* value);
  void set_strfile(const char* value, size_t size);
  ::std::string* mutable_strfile();
  ::std::string* release_strfile();
  void set_allocated_strfile(::std::string* strfile);

  // optional string strRTSPUrl = 13;
  void clear_strrtspurl();
  static const int kStrRTSPUrlFieldNumber = 13;
  const ::std::string& strrtspurl() const;
  void set_strrtspurl(const ::std::string& value);
  void set_strrtspurl(const char* value);
  void set_strrtspurl(const char* value, size_t size);
  ::std::string* mutable_strrtspurl();
  ::std::string* release_strrtspurl();
  void set_allocated_strrtspurl(::std::string* strrtspurl);

  // optional bool bHWaccel = 14;
  void clear_bhwaccel();
  static const int kBHWaccelFieldNumber = 14;
  bool bhwaccel() const;
  void set_bhwaccel(bool value);

  // optional bool bServerMotion = 15;
  void clear_bservermotion();
  static const int kBServerMotionFieldNumber = 15;
  bool bservermotion() const;
  void set_bservermotion(bool value);

  // optional .VidConf.CameraConnectType nConnectType = 16;
  void clear_nconnecttype();
  static const int kNConnectTypeFieldNumber = 16;
  ::VidConf::CameraConnectType nconnecttype() const;
  void set_nconnecttype(::VidConf::CameraConnectType value);

  // optional bool bHDFSRecord = 17;
  void clear_bhdfsrecord();
  static const int kBHDFSRecordFieldNumber = 17;
  bool bhdfsrecord() const;
  void set_bhdfsrecord(bool value);

  // optional bool bRecord = 18;
  void clear_brecord();
  static const int kBRecordFieldNumber = 18;
  bool brecord() const;
  void set_brecord(bool value);

  // optional string strRecordTemplId = 19;
  void clear_strrecordtemplid();
  static const int kStrRecordTemplIdFieldNumber = 19;
  const ::std::string& strrecordtemplid() const;
  void set_strrecordtemplid(const ::std::string& value);
  void set_strrecordtemplid(const char* value);
  void set_strrecordtemplid(const char* value, size_t size);
  ::std::string* mutable_strrecordtemplid();
  ::std::string* release_strrecordtemplid();
  void set_allocated_strrecordtemplid(::std::string* strrecordtemplid);

  // @@protoc_insertion_point(class_scope:VidConf.VidCamera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr stronvifaddress_;
  ::google::protobuf::internal::ArenaStringPtr strprofiletoken1_;
  ::google::protobuf::internal::ArenaStringPtr strprofiletoken2_;
  int ntype_;
  bool bprofiletoken_;
  bool bhwaccel_;
  bool bservermotion_;
  bool bhdfsrecord_;
  ::google::protobuf::internal::ArenaStringPtr strfile_;
  ::google::protobuf::internal::ArenaStringPtr strrtspurl_;
  int nconnecttype_;
  bool brecord_;
  ::google::protobuf::internal::ArenaStringPtr strrecordtemplid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidCamera* default_instance_;
};
// -------------------------------------------------------------------

class VidCameraList : public ::google::protobuf::Message {
 public:
  VidCameraList();
  virtual ~VidCameraList();

  VidCameraList(const VidCameraList& from);

  inline VidCameraList& operator=(const VidCameraList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCameraList& default_instance();

  void Swap(VidCameraList* other);

  // implements Message ----------------------------------------------

  inline VidCameraList* New() const { return New(NULL); }

  VidCameraList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidCameraList& from);
  void MergeFrom(const VidCameraList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidCameraList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidCamera cVidCamera = 1;
  int cvidcamera_size() const;
  void clear_cvidcamera();
  static const int kCVidCameraFieldNumber = 1;
  const ::VidConf::VidCamera& cvidcamera(int index) const;
  ::VidConf::VidCamera* mutable_cvidcamera(int index);
  ::VidConf::VidCamera* add_cvidcamera();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidCamera >*
      mutable_cvidcamera();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidCamera >&
      cvidcamera() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidCameraList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidCamera > cvidcamera_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidCameraList* default_instance_;
};
// -------------------------------------------------------------------

class VidHDFSConf : public ::google::protobuf::Message {
 public:
  VidHDFSConf();
  virtual ~VidHDFSConf();

  VidHDFSConf(const VidHDFSConf& from);

  inline VidHDFSConf& operator=(const VidHDFSConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidHDFSConf& default_instance();

  void Swap(VidHDFSConf* other);

  // implements Message ----------------------------------------------

  inline VidHDFSConf* New() const { return New(NULL); }

  VidHDFSConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidHDFSConf& from);
  void MergeFrom(const VidHDFSConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidHDFSConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strNameNode = 1;
  void clear_strnamenode();
  static const int kStrNameNodeFieldNumber = 1;
  const ::std::string& strnamenode() const;
  void set_strnamenode(const ::std::string& value);
  void set_strnamenode(const char* value);
  void set_strnamenode(const char* value, size_t size);
  ::std::string* mutable_strnamenode();
  ::std::string* release_strnamenode();
  void set_allocated_strnamenode(::std::string* strnamenode);

  // optional string strPort = 2;
  void clear_strport();
  static const int kStrPortFieldNumber = 2;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // optional string strUser = 3;
  void clear_struser();
  static const int kStrUserFieldNumber = 3;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // optional string strPasswd = 4;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 4;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // optional int32 nFileInterval = 5;
  void clear_nfileinterval();
  static const int kNFileIntervalFieldNumber = 5;
  ::google::protobuf::int32 nfileinterval() const;
  void set_nfileinterval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidConf.VidHDFSConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strnamenode_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::int32 nfileinterval_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidHDFSConf* default_instance_;
};
// -------------------------------------------------------------------

class VidCameraId : public ::google::protobuf::Message {
 public:
  VidCameraId();
  virtual ~VidCameraId();

  VidCameraId(const VidCameraId& from);

  inline VidCameraId& operator=(const VidCameraId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCameraId& default_instance();

  void Swap(VidCameraId* other);

  // implements Message ----------------------------------------------

  inline VidCameraId* New() const { return New(NULL); }

  VidCameraId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidCameraId& from);
  void MergeFrom(const VidCameraId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidCameraId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strStorId = 1;
  void clear_strstorid();
  static const int kStrStorIdFieldNumber = 1;
  const ::std::string& strstorid() const;
  void set_strstorid(const ::std::string& value);
  void set_strstorid(const char* value);
  void set_strstorid(const char* value, size_t size);
  ::std::string* mutable_strstorid();
  ::std::string* release_strstorid();
  void set_allocated_strstorid(::std::string* strstorid);

  // optional string strCameraId = 2;
  void clear_strcameraid();
  static const int kStrCameraIdFieldNumber = 2;
  const ::std::string& strcameraid() const;
  void set_strcameraid(const ::std::string& value);
  void set_strcameraid(const char* value);
  void set_strcameraid(const char* value, size_t size);
  ::std::string* mutable_strcameraid();
  ::std::string* release_strcameraid();
  void set_allocated_strcameraid(::std::string* strcameraid);

  // @@protoc_insertion_point(class_scope:VidConf.VidCameraId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strstorid_;
  ::google::protobuf::internal::ArenaStringPtr strcameraid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidCameraId* default_instance_;
};
// -------------------------------------------------------------------

class VidClientConf : public ::google::protobuf::Message {
 public:
  VidClientConf();
  virtual ~VidClientConf();

  VidClientConf(const VidClientConf& from);

  inline VidClientConf& operator=(const VidClientConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidClientConf& default_instance();

  void Swap(VidClientConf* other);

  // implements Message ----------------------------------------------

  inline VidClientConf* New() const { return New(NULL); }

  VidClientConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidClientConf& from);
  void MergeFrom(const VidClientConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidClientConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VidConf.VidLanguage nLang = 1;
  void clear_nlang();
  static const int kNLangFieldNumber = 1;
  ::VidConf::VidLanguage nlang() const;
  void set_nlang(::VidConf::VidLanguage value);

  // @@protoc_insertion_point(class_scope:VidConf.VidClientConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int nlang_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidClientConf* default_instance_;
};
// -------------------------------------------------------------------

class VidStor : public ::google::protobuf::Message {
 public:
  VidStor();
  virtual ~VidStor();

  VidStor(const VidStor& from);

  inline VidStor& operator=(const VidStor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStor& default_instance();

  void Swap(VidStor* other);

  // implements Message ----------------------------------------------

  inline VidStor* New() const { return New(NULL); }

  VidStor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidStor& from);
  void MergeFrom(const VidStor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidStor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // optional string strIP = 3;
  void clear_strip();
  static const int kStrIPFieldNumber = 3;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // optional string strPort = 4;
  void clear_strport();
  static const int kStrPortFieldNumber = 4;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // optional string strUser = 5;
  void clear_struser();
  static const int kStrUserFieldNumber = 5;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // optional string strPasswd = 6;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 6;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // @@protoc_insertion_point(class_scope:VidConf.VidStor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidStor* default_instance_;
};
// -------------------------------------------------------------------

class VidStorList : public ::google::protobuf::Message {
 public:
  VidStorList();
  virtual ~VidStorList();

  VidStorList(const VidStorList& from);

  inline VidStorList& operator=(const VidStorList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStorList& default_instance();

  void Swap(VidStorList* other);

  // implements Message ----------------------------------------------

  inline VidStorList* New() const { return New(NULL); }

  VidStorList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidStorList& from);
  void MergeFrom(const VidStorList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidStorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidStor cVidStor = 1;
  int cvidstor_size() const;
  void clear_cvidstor();
  static const int kCVidStorFieldNumber = 1;
  const ::VidConf::VidStor& cvidstor(int index) const;
  ::VidConf::VidStor* mutable_cvidstor(int index);
  ::VidConf::VidStor* add_cvidstor();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidStor >*
      mutable_cvidstor();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidStor >&
      cvidstor() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidStorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidStor > cvidstor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidStorList* default_instance_;
};
// -------------------------------------------------------------------

class VidViewWindow : public ::google::protobuf::Message {
 public:
  VidViewWindow();
  virtual ~VidViewWindow();

  VidViewWindow(const VidViewWindow& from);

  inline VidViewWindow& operator=(const VidViewWindow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidViewWindow& default_instance();

  void Swap(VidViewWindow* other);

  // implements Message ----------------------------------------------

  inline VidViewWindow* New() const { return New(NULL); }

  VidViewWindow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidViewWindow& from);
  void MergeFrom(const VidViewWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidViewWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VidConf.VidCameraId cId = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCIdFieldNumber = 1;
  const ::VidConf::VidCameraId& cid() const;
  ::VidConf::VidCameraId* mutable_cid();
  ::VidConf::VidCameraId* release_cid();
  void set_allocated_cid(::VidConf::VidCameraId* cid);

  // optional int32 nWindowsId = 2;
  void clear_nwindowsid();
  static const int kNWindowsIdFieldNumber = 2;
  ::google::protobuf::int32 nwindowsid() const;
  void set_nwindowsid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidConf.VidViewWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::VidConf::VidCameraId* cid_;
  ::google::protobuf::int32 nwindowsid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidViewWindow* default_instance_;
};
// -------------------------------------------------------------------

class VidView : public ::google::protobuf::Message {
 public:
  VidView();
  virtual ~VidView();

  VidView(const VidView& from);

  inline VidView& operator=(const VidView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidView& default_instance();

  void Swap(VidView* other);

  // implements Message ----------------------------------------------

  inline VidView* New() const { return New(NULL); }

  VidView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidView& from);
  void MergeFrom(const VidView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // repeated .VidConf.VidViewWindow cView = 3;
  int cview_size() const;
  void clear_cview();
  static const int kCViewFieldNumber = 3;
  const ::VidConf::VidViewWindow& cview(int index) const;
  ::VidConf::VidViewWindow* mutable_cview(int index);
  ::VidConf::VidViewWindow* add_cview();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidViewWindow >*
      mutable_cview();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidViewWindow >&
      cview() const;

  // optional .VidConf.VidLayout cLayout = 4;
  void clear_clayout();
  static const int kCLayoutFieldNumber = 4;
  ::VidConf::VidLayout clayout() const;
  void set_clayout(::VidConf::VidLayout value);

  // @@protoc_insertion_point(class_scope:VidConf.VidView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidViewWindow > cview_;
  int clayout_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidView* default_instance_;
};
// -------------------------------------------------------------------

class VidViewList : public ::google::protobuf::Message {
 public:
  VidViewList();
  virtual ~VidViewList();

  VidViewList(const VidViewList& from);

  inline VidViewList& operator=(const VidViewList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidViewList& default_instance();

  void Swap(VidViewList* other);

  // implements Message ----------------------------------------------

  inline VidViewList* New() const { return New(NULL); }

  VidViewList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidViewList& from);
  void MergeFrom(const VidViewList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidViewList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidView cVidView = 1;
  int cvidview_size() const;
  void clear_cvidview();
  static const int kCVidViewFieldNumber = 1;
  const ::VidConf::VidView& cvidview(int index) const;
  ::VidConf::VidView* mutable_cvidview(int index);
  ::VidConf::VidView* add_cvidview();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidView >*
      mutable_cvidview();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidView >&
      cvidview() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidViewList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidView > cvidview_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidViewList* default_instance_;
};
// -------------------------------------------------------------------

class VidGroup : public ::google::protobuf::Message {
 public:
  VidGroup();
  virtual ~VidGroup();

  VidGroup(const VidGroup& from);

  inline VidGroup& operator=(const VidGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidGroup& default_instance();

  void Swap(VidGroup* other);

  // implements Message ----------------------------------------------

  inline VidGroup* New() const { return New(NULL); }

  VidGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidGroup& from);
  void MergeFrom(const VidGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // repeated .VidConf.VidCameraId cGroup = 3;
  int cgroup_size() const;
  void clear_cgroup();
  static const int kCGroupFieldNumber = 3;
  const ::VidConf::VidCameraId& cgroup(int index) const;
  ::VidConf::VidCameraId* mutable_cgroup(int index);
  ::VidConf::VidCameraId* add_cgroup();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidCameraId >*
      mutable_cgroup();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidCameraId >&
      cgroup() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidCameraId > cgroup_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidGroup* default_instance_;
};
// -------------------------------------------------------------------

class VidGroupList : public ::google::protobuf::Message {
 public:
  VidGroupList();
  virtual ~VidGroupList();

  VidGroupList(const VidGroupList& from);

  inline VidGroupList& operator=(const VidGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidGroupList& default_instance();

  void Swap(VidGroupList* other);

  // implements Message ----------------------------------------------

  inline VidGroupList* New() const { return New(NULL); }

  VidGroupList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidGroupList& from);
  void MergeFrom(const VidGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidGroupList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidGroup cVidGroup = 1;
  int cvidgroup_size() const;
  void clear_cvidgroup();
  static const int kCVidGroupFieldNumber = 1;
  const ::VidConf::VidGroup& cvidgroup(int index) const;
  ::VidConf::VidGroup* mutable_cvidgroup(int index);
  ::VidConf::VidGroup* add_cvidgroup();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidGroup >*
      mutable_cvidgroup();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidGroup >&
      cvidgroup() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidGroupList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidGroup > cvidgroup_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidGroupList* default_instance_;
};
// -------------------------------------------------------------------

class VidEmapCamera : public ::google::protobuf::Message {
 public:
  VidEmapCamera();
  virtual ~VidEmapCamera();

  VidEmapCamera(const VidEmapCamera& from);

  inline VidEmapCamera& operator=(const VidEmapCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmapCamera& default_instance();

  void Swap(VidEmapCamera* other);

  // implements Message ----------------------------------------------

  inline VidEmapCamera* New() const { return New(NULL); }

  VidEmapCamera* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidEmapCamera& from);
  void MergeFrom(const VidEmapCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidEmapCamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VidConf.VidCameraId cId = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCIdFieldNumber = 1;
  const ::VidConf::VidCameraId& cid() const;
  ::VidConf::VidCameraId* mutable_cid();
  ::VidConf::VidCameraId* release_cid();
  void set_allocated_cid(::VidConf::VidCameraId* cid);

  // optional int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // optional int32 h = 5;
  void clear_h();
  static const int kHFieldNumber = 5;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidConf.VidEmapCamera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::VidConf::VidCameraId* cid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidEmapCamera* default_instance_;
};
// -------------------------------------------------------------------

class VidEmap : public ::google::protobuf::Message {
 public:
  VidEmap();
  virtual ~VidEmap();

  VidEmap(const VidEmap& from);

  inline VidEmap& operator=(const VidEmap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmap& default_instance();

  void Swap(VidEmap* other);

  // implements Message ----------------------------------------------

  inline VidEmap* New() const { return New(NULL); }

  VidEmap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidEmap& from);
  void MergeFrom(const VidEmap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidEmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // optional string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // repeated .VidConf.VidEmapCamera cCamera = 3;
  int ccamera_size() const;
  void clear_ccamera();
  static const int kCCameraFieldNumber = 3;
  const ::VidConf::VidEmapCamera& ccamera(int index) const;
  ::VidConf::VidEmapCamera* mutable_ccamera(int index);
  ::VidConf::VidEmapCamera* add_ccamera();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmapCamera >*
      mutable_ccamera();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmapCamera >&
      ccamera() const;

  // optional string strMapFile = 4;
  void clear_strmapfile();
  static const int kStrMapFileFieldNumber = 4;
  const ::std::string& strmapfile() const;
  void set_strmapfile(const ::std::string& value);
  void set_strmapfile(const char* value);
  void set_strmapfile(const char* value, size_t size);
  ::std::string* mutable_strmapfile();
  ::std::string* release_strmapfile();
  void set_allocated_strmapfile(::std::string* strmapfile);

  // @@protoc_insertion_point(class_scope:VidConf.VidEmap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmapCamera > ccamera_;
  ::google::protobuf::internal::ArenaStringPtr strmapfile_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidEmap* default_instance_;
};
// -------------------------------------------------------------------

class VidEmapList : public ::google::protobuf::Message {
 public:
  VidEmapList();
  virtual ~VidEmapList();

  VidEmapList(const VidEmapList& from);

  inline VidEmapList& operator=(const VidEmapList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmapList& default_instance();

  void Swap(VidEmapList* other);

  // implements Message ----------------------------------------------

  inline VidEmapList* New() const { return New(NULL); }

  VidEmapList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VidEmapList& from);
  void MergeFrom(const VidEmapList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VidEmapList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidConf.VidEmap cVidEmap = 1;
  int cvidemap_size() const;
  void clear_cvidemap();
  static const int kCVidEmapFieldNumber = 1;
  const ::VidConf::VidEmap& cvidemap(int index) const;
  ::VidConf::VidEmap* mutable_cvidemap(int index);
  ::VidConf::VidEmap* add_cvidemap();
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmap >*
      mutable_cvidemap();
  const ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmap >&
      cvidemap() const;

  // @@protoc_insertion_point(class_scope:VidConf.VidEmapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmap > cvidemap_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vidconf_2eproto();
  friend void protobuf_AssignDesc_vidconf_2eproto();
  friend void protobuf_ShutdownFile_vidconf_2eproto();

  void InitAsDefaultInstance();
  static VidEmapList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VidUser

// optional string strId = 1;
inline void VidUser::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidUser.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidUser.strId)
}
inline void VidUser::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidUser.strId)
}
inline void VidUser::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidUser.strId)
}
inline ::std::string* VidUser::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidUser.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidUser.strId)
}

// optional string strName = 2;
inline void VidUser::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidUser.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidUser.strName)
}
inline void VidUser::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidUser.strName)
}
inline void VidUser::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidUser.strName)
}
inline ::std::string* VidUser::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidUser.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidUser.strName)
}

// optional string strPasswd = 3;
inline void VidUser::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidConf.VidUser.strPasswd)
  return strpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidUser.strPasswd)
}
inline void VidUser::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidUser.strPasswd)
}
inline void VidUser::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidUser.strPasswd)
}
inline ::std::string* VidUser::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidUser.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strpasswd() {
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidUser.strPasswd)
}

// optional string strRoleId = 4;
inline void VidUser::clear_strroleid() {
  strroleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strroleid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidUser.strRoleId)
  return strroleid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_strroleid(const ::std::string& value) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidUser.strRoleId)
}
inline void VidUser::set_strroleid(const char* value) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidUser.strRoleId)
}
inline void VidUser::set_strroleid(const char* value, size_t size) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidUser.strRoleId)
}
inline ::std::string* VidUser::mutable_strroleid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidUser.strRoleId)
  return strroleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strroleid() {
  
  return strroleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strroleid(::std::string* strroleid) {
  if (strroleid != NULL) {
    
  } else {
    
  }
  strroleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strroleid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidUser.strRoleId)
}

// -------------------------------------------------------------------

// VidUserList

// repeated .VidConf.VidUser cVidUser = 1;
inline int VidUserList::cviduser_size() const {
  return cviduser_.size();
}
inline void VidUserList::clear_cviduser() {
  cviduser_.Clear();
}
inline const ::VidConf::VidUser& VidUserList::cviduser(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidUserList.cVidUser)
  return cviduser_.Get(index);
}
inline ::VidConf::VidUser* VidUserList::mutable_cviduser(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidUserList.cVidUser)
  return cviduser_.Mutable(index);
}
inline ::VidConf::VidUser* VidUserList::add_cviduser() {
  // @@protoc_insertion_point(field_add:VidConf.VidUserList.cVidUser)
  return cviduser_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidUser >*
VidUserList::mutable_cviduser() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidUserList.cVidUser)
  return &cviduser_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidUser >&
VidUserList::cviduser() const {
  // @@protoc_insertion_point(field_list:VidConf.VidUserList.cVidUser)
  return cviduser_;
}

// -------------------------------------------------------------------

// VidStorServerConf

// optional int32 nOapiPort = 1;
inline void VidStorServerConf::clear_noapiport() {
  noapiport_ = 0;
}
inline ::google::protobuf::int32 VidStorServerConf::noapiport() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStorServerConf.nOapiPort)
  return noapiport_;
}
inline void VidStorServerConf::set_noapiport(::google::protobuf::int32 value) {
  
  noapiport_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidStorServerConf.nOapiPort)
}

// -------------------------------------------------------------------

// VidCamera

// optional string strId = 1;
inline void VidCamera::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strId)
}
inline void VidCamera::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strId)
}
inline void VidCamera::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strId)
}
inline ::std::string* VidCamera::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strId)
}

// optional string strName = 2;
inline void VidCamera::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strName)
}
inline void VidCamera::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strName)
}
inline void VidCamera::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strName)
}
inline ::std::string* VidCamera::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strName)
}

// optional .VidConf.CameraType nType = 3;
inline void VidCamera::clear_ntype() {
  ntype_ = 0;
}
inline ::VidConf::CameraType VidCamera::ntype() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.nType)
  return static_cast< ::VidConf::CameraType >(ntype_);
}
inline void VidCamera::set_ntype(::VidConf::CameraType value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.nType)
}

// optional string strIP = 4;
inline void VidCamera::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strip() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strIP)
  return strip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strIP)
}
inline void VidCamera::set_strip(const char* value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strIP)
}
inline void VidCamera::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strIP)
}
inline ::std::string* VidCamera::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strIP)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strip() {
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strIP)
}

// optional string strPort = 5;
inline void VidCamera::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strport() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strPort)
  return strport_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strPort)
}
inline void VidCamera::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strPort)
}
inline void VidCamera::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strPort)
}
inline ::std::string* VidCamera::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strport() {
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strPort)
}

// optional string strUser = 6;
inline void VidCamera::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::struser() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strUser)
  return struser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strUser)
}
inline void VidCamera::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strUser)
}
inline void VidCamera::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strUser)
}
inline ::std::string* VidCamera::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_struser() {
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strUser)
}

// optional string strPasswd = 7;
inline void VidCamera::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strPasswd)
  return strpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strPasswd)
}
inline void VidCamera::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strPasswd)
}
inline void VidCamera::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strPasswd)
}
inline ::std::string* VidCamera::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strpasswd() {
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strPasswd)
}

// optional string strONVIFAddress = 8;
inline void VidCamera::clear_stronvifaddress() {
  stronvifaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::stronvifaddress() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strONVIFAddress)
  return stronvifaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_stronvifaddress(const ::std::string& value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strONVIFAddress)
}
inline void VidCamera::set_stronvifaddress(const char* value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strONVIFAddress)
}
inline void VidCamera::set_stronvifaddress(const char* value, size_t size) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strONVIFAddress)
}
inline ::std::string* VidCamera::mutable_stronvifaddress() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strONVIFAddress)
  return stronvifaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_stronvifaddress() {
  
  return stronvifaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_stronvifaddress(::std::string* stronvifaddress) {
  if (stronvifaddress != NULL) {
    
  } else {
    
  }
  stronvifaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stronvifaddress);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strONVIFAddress)
}

// optional bool bProfileToken = 9;
inline void VidCamera::clear_bprofiletoken() {
  bprofiletoken_ = false;
}
inline bool VidCamera::bprofiletoken() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.bProfileToken)
  return bprofiletoken_;
}
inline void VidCamera::set_bprofiletoken(bool value) {
  
  bprofiletoken_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.bProfileToken)
}

// optional string strProfileToken1 = 10;
inline void VidCamera::clear_strprofiletoken1() {
  strprofiletoken1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strprofiletoken1() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strProfileToken1)
  return strprofiletoken1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strprofiletoken1(const ::std::string& value) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strProfileToken1)
}
inline void VidCamera::set_strprofiletoken1(const char* value) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strProfileToken1)
}
inline void VidCamera::set_strprofiletoken1(const char* value, size_t size) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strProfileToken1)
}
inline ::std::string* VidCamera::mutable_strprofiletoken1() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strProfileToken1)
  return strprofiletoken1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strprofiletoken1() {
  
  return strprofiletoken1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strprofiletoken1(::std::string* strprofiletoken1) {
  if (strprofiletoken1 != NULL) {
    
  } else {
    
  }
  strprofiletoken1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strprofiletoken1);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strProfileToken1)
}

// optional string strProfileToken2 = 11;
inline void VidCamera::clear_strprofiletoken2() {
  strprofiletoken2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strprofiletoken2() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strProfileToken2)
  return strprofiletoken2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strprofiletoken2(const ::std::string& value) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strProfileToken2)
}
inline void VidCamera::set_strprofiletoken2(const char* value) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strProfileToken2)
}
inline void VidCamera::set_strprofiletoken2(const char* value, size_t size) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strProfileToken2)
}
inline ::std::string* VidCamera::mutable_strprofiletoken2() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strProfileToken2)
  return strprofiletoken2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strprofiletoken2() {
  
  return strprofiletoken2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strprofiletoken2(::std::string* strprofiletoken2) {
  if (strprofiletoken2 != NULL) {
    
  } else {
    
  }
  strprofiletoken2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strprofiletoken2);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strProfileToken2)
}

// optional string strFile = 12;
inline void VidCamera::clear_strfile() {
  strfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strfile() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strFile)
  return strfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strfile(const ::std::string& value) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strFile)
}
inline void VidCamera::set_strfile(const char* value) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strFile)
}
inline void VidCamera::set_strfile(const char* value, size_t size) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strFile)
}
inline ::std::string* VidCamera::mutable_strfile() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strFile)
  return strfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strfile() {
  
  return strfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strfile(::std::string* strfile) {
  if (strfile != NULL) {
    
  } else {
    
  }
  strfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfile);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strFile)
}

// optional string strRTSPUrl = 13;
inline void VidCamera::clear_strrtspurl() {
  strrtspurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strrtspurl() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strRTSPUrl)
  return strrtspurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strrtspurl(const ::std::string& value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strRTSPUrl)
}
inline void VidCamera::set_strrtspurl(const char* value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strRTSPUrl)
}
inline void VidCamera::set_strrtspurl(const char* value, size_t size) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strRTSPUrl)
}
inline ::std::string* VidCamera::mutable_strrtspurl() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strRTSPUrl)
  return strrtspurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strrtspurl() {
  
  return strrtspurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strrtspurl(::std::string* strrtspurl) {
  if (strrtspurl != NULL) {
    
  } else {
    
  }
  strrtspurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrtspurl);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strRTSPUrl)
}

// optional bool bHWaccel = 14;
inline void VidCamera::clear_bhwaccel() {
  bhwaccel_ = false;
}
inline bool VidCamera::bhwaccel() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.bHWaccel)
  return bhwaccel_;
}
inline void VidCamera::set_bhwaccel(bool value) {
  
  bhwaccel_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.bHWaccel)
}

// optional bool bServerMotion = 15;
inline void VidCamera::clear_bservermotion() {
  bservermotion_ = false;
}
inline bool VidCamera::bservermotion() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.bServerMotion)
  return bservermotion_;
}
inline void VidCamera::set_bservermotion(bool value) {
  
  bservermotion_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.bServerMotion)
}

// optional .VidConf.CameraConnectType nConnectType = 16;
inline void VidCamera::clear_nconnecttype() {
  nconnecttype_ = 0;
}
inline ::VidConf::CameraConnectType VidCamera::nconnecttype() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.nConnectType)
  return static_cast< ::VidConf::CameraConnectType >(nconnecttype_);
}
inline void VidCamera::set_nconnecttype(::VidConf::CameraConnectType value) {
  
  nconnecttype_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.nConnectType)
}

// optional bool bHDFSRecord = 17;
inline void VidCamera::clear_bhdfsrecord() {
  bhdfsrecord_ = false;
}
inline bool VidCamera::bhdfsrecord() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.bHDFSRecord)
  return bhdfsrecord_;
}
inline void VidCamera::set_bhdfsrecord(bool value) {
  
  bhdfsrecord_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.bHDFSRecord)
}

// optional bool bRecord = 18;
inline void VidCamera::clear_brecord() {
  brecord_ = false;
}
inline bool VidCamera::brecord() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.bRecord)
  return brecord_;
}
inline void VidCamera::set_brecord(bool value) {
  
  brecord_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.bRecord)
}

// optional string strRecordTemplId = 19;
inline void VidCamera::clear_strrecordtemplid() {
  strrecordtemplid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strrecordtemplid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCamera.strRecordTemplId)
  return strrecordtemplid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_strrecordtemplid(const ::std::string& value) {
  
  strrecordtemplid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCamera.strRecordTemplId)
}
inline void VidCamera::set_strrecordtemplid(const char* value) {
  
  strrecordtemplid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCamera.strRecordTemplId)
}
inline void VidCamera::set_strrecordtemplid(const char* value, size_t size) {
  
  strrecordtemplid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCamera.strRecordTemplId)
}
inline ::std::string* VidCamera::mutable_strrecordtemplid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCamera.strRecordTemplId)
  return strrecordtemplid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strrecordtemplid() {
  
  return strrecordtemplid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strrecordtemplid(::std::string* strrecordtemplid) {
  if (strrecordtemplid != NULL) {
    
  } else {
    
  }
  strrecordtemplid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrecordtemplid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCamera.strRecordTemplId)
}

// -------------------------------------------------------------------

// VidCameraList

// repeated .VidConf.VidCamera cVidCamera = 1;
inline int VidCameraList::cvidcamera_size() const {
  return cvidcamera_.size();
}
inline void VidCameraList::clear_cvidcamera() {
  cvidcamera_.Clear();
}
inline const ::VidConf::VidCamera& VidCameraList::cvidcamera(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidCameraList.cVidCamera)
  return cvidcamera_.Get(index);
}
inline ::VidConf::VidCamera* VidCameraList::mutable_cvidcamera(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidCameraList.cVidCamera)
  return cvidcamera_.Mutable(index);
}
inline ::VidConf::VidCamera* VidCameraList::add_cvidcamera() {
  // @@protoc_insertion_point(field_add:VidConf.VidCameraList.cVidCamera)
  return cvidcamera_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidCamera >*
VidCameraList::mutable_cvidcamera() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidCameraList.cVidCamera)
  return &cvidcamera_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidCamera >&
VidCameraList::cvidcamera() const {
  // @@protoc_insertion_point(field_list:VidConf.VidCameraList.cVidCamera)
  return cvidcamera_;
}

// -------------------------------------------------------------------

// VidHDFSConf

// optional string strNameNode = 1;
inline void VidHDFSConf::clear_strnamenode() {
  strnamenode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strnamenode() const {
  // @@protoc_insertion_point(field_get:VidConf.VidHDFSConf.strNameNode)
  return strnamenode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_strnamenode(const ::std::string& value) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidHDFSConf.strNameNode)
}
inline void VidHDFSConf::set_strnamenode(const char* value) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidHDFSConf.strNameNode)
}
inline void VidHDFSConf::set_strnamenode(const char* value, size_t size) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidHDFSConf.strNameNode)
}
inline ::std::string* VidHDFSConf::mutable_strnamenode() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidHDFSConf.strNameNode)
  return strnamenode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strnamenode() {
  
  return strnamenode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strnamenode(::std::string* strnamenode) {
  if (strnamenode != NULL) {
    
  } else {
    
  }
  strnamenode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnamenode);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidHDFSConf.strNameNode)
}

// optional string strPort = 2;
inline void VidHDFSConf::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strport() const {
  // @@protoc_insertion_point(field_get:VidConf.VidHDFSConf.strPort)
  return strport_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidHDFSConf.strPort)
}
inline void VidHDFSConf::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidHDFSConf.strPort)
}
inline void VidHDFSConf::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidHDFSConf.strPort)
}
inline ::std::string* VidHDFSConf::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidHDFSConf.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strport() {
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidHDFSConf.strPort)
}

// optional string strUser = 3;
inline void VidHDFSConf::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::struser() const {
  // @@protoc_insertion_point(field_get:VidConf.VidHDFSConf.strUser)
  return struser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidHDFSConf.strUser)
}
inline void VidHDFSConf::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidHDFSConf.strUser)
}
inline void VidHDFSConf::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidHDFSConf.strUser)
}
inline ::std::string* VidHDFSConf::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidHDFSConf.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_struser() {
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidHDFSConf.strUser)
}

// optional string strPasswd = 4;
inline void VidHDFSConf::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidConf.VidHDFSConf.strPasswd)
  return strpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidHDFSConf.strPasswd)
}
inline void VidHDFSConf::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidHDFSConf.strPasswd)
}
inline void VidHDFSConf::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidHDFSConf.strPasswd)
}
inline ::std::string* VidHDFSConf::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidHDFSConf.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strpasswd() {
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidHDFSConf.strPasswd)
}

// optional int32 nFileInterval = 5;
inline void VidHDFSConf::clear_nfileinterval() {
  nfileinterval_ = 0;
}
inline ::google::protobuf::int32 VidHDFSConf::nfileinterval() const {
  // @@protoc_insertion_point(field_get:VidConf.VidHDFSConf.nFileInterval)
  return nfileinterval_;
}
inline void VidHDFSConf::set_nfileinterval(::google::protobuf::int32 value) {
  
  nfileinterval_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidHDFSConf.nFileInterval)
}

// -------------------------------------------------------------------

// VidCameraId

// optional string strStorId = 1;
inline void VidCameraId::clear_strstorid() {
  strstorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCameraId::strstorid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCameraId.strStorId)
  return strstorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_strstorid(const ::std::string& value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCameraId.strStorId)
}
inline void VidCameraId::set_strstorid(const char* value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCameraId.strStorId)
}
inline void VidCameraId::set_strstorid(const char* value, size_t size) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCameraId.strStorId)
}
inline ::std::string* VidCameraId::mutable_strstorid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCameraId.strStorId)
  return strstorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCameraId::release_strstorid() {
  
  return strstorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_allocated_strstorid(::std::string* strstorid) {
  if (strstorid != NULL) {
    
  } else {
    
  }
  strstorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstorid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCameraId.strStorId)
}

// optional string strCameraId = 2;
inline void VidCameraId::clear_strcameraid() {
  strcameraid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCameraId::strcameraid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidCameraId.strCameraId)
  return strcameraid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_strcameraid(const ::std::string& value) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidCameraId.strCameraId)
}
inline void VidCameraId::set_strcameraid(const char* value) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidCameraId.strCameraId)
}
inline void VidCameraId::set_strcameraid(const char* value, size_t size) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidCameraId.strCameraId)
}
inline ::std::string* VidCameraId::mutable_strcameraid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidCameraId.strCameraId)
  return strcameraid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCameraId::release_strcameraid() {
  
  return strcameraid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_allocated_strcameraid(::std::string* strcameraid) {
  if (strcameraid != NULL) {
    
  } else {
    
  }
  strcameraid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcameraid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidCameraId.strCameraId)
}

// -------------------------------------------------------------------

// VidClientConf

// optional .VidConf.VidLanguage nLang = 1;
inline void VidClientConf::clear_nlang() {
  nlang_ = 0;
}
inline ::VidConf::VidLanguage VidClientConf::nlang() const {
  // @@protoc_insertion_point(field_get:VidConf.VidClientConf.nLang)
  return static_cast< ::VidConf::VidLanguage >(nlang_);
}
inline void VidClientConf::set_nlang(::VidConf::VidLanguage value) {
  
  nlang_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidClientConf.nLang)
}

// -------------------------------------------------------------------

// VidStor

// optional string strId = 1;
inline void VidStor::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strId)
}
inline void VidStor::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strId)
}
inline void VidStor::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strId)
}
inline ::std::string* VidStor::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strId)
}

// optional string strName = 2;
inline void VidStor::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strName)
}
inline void VidStor::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strName)
}
inline void VidStor::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strName)
}
inline ::std::string* VidStor::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strName)
}

// optional string strIP = 3;
inline void VidStor::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strip() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strIP)
  return strip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strIP)
}
inline void VidStor::set_strip(const char* value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strIP)
}
inline void VidStor::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strIP)
}
inline ::std::string* VidStor::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strIP)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strip() {
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strIP)
}

// optional string strPort = 4;
inline void VidStor::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strport() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strPort)
  return strport_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strPort)
}
inline void VidStor::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strPort)
}
inline void VidStor::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strPort)
}
inline ::std::string* VidStor::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strport() {
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strPort)
}

// optional string strUser = 5;
inline void VidStor::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::struser() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strUser)
  return struser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strUser)
}
inline void VidStor::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strUser)
}
inline void VidStor::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strUser)
}
inline ::std::string* VidStor::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_struser() {
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strUser)
}

// optional string strPasswd = 6;
inline void VidStor::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidConf.VidStor.strPasswd)
  return strpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidStor.strPasswd)
}
inline void VidStor::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidStor.strPasswd)
}
inline void VidStor::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidStor.strPasswd)
}
inline ::std::string* VidStor::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidStor.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strpasswd() {
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidStor.strPasswd)
}

// -------------------------------------------------------------------

// VidStorList

// repeated .VidConf.VidStor cVidStor = 1;
inline int VidStorList::cvidstor_size() const {
  return cvidstor_.size();
}
inline void VidStorList::clear_cvidstor() {
  cvidstor_.Clear();
}
inline const ::VidConf::VidStor& VidStorList::cvidstor(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidStorList.cVidStor)
  return cvidstor_.Get(index);
}
inline ::VidConf::VidStor* VidStorList::mutable_cvidstor(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidStorList.cVidStor)
  return cvidstor_.Mutable(index);
}
inline ::VidConf::VidStor* VidStorList::add_cvidstor() {
  // @@protoc_insertion_point(field_add:VidConf.VidStorList.cVidStor)
  return cvidstor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidStor >*
VidStorList::mutable_cvidstor() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidStorList.cVidStor)
  return &cvidstor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidStor >&
VidStorList::cvidstor() const {
  // @@protoc_insertion_point(field_list:VidConf.VidStorList.cVidStor)
  return cvidstor_;
}

// -------------------------------------------------------------------

// VidViewWindow

// optional .VidConf.VidCameraId cId = 1;
inline bool VidViewWindow::has_cid() const {
  return !_is_default_instance_ && cid_ != NULL;
}
inline void VidViewWindow::clear_cid() {
  if (GetArenaNoVirtual() == NULL && cid_ != NULL) delete cid_;
  cid_ = NULL;
}
inline const ::VidConf::VidCameraId& VidViewWindow::cid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidViewWindow.cId)
  return cid_ != NULL ? *cid_ : *default_instance_->cid_;
}
inline ::VidConf::VidCameraId* VidViewWindow::mutable_cid() {
  
  if (cid_ == NULL) {
    cid_ = new ::VidConf::VidCameraId;
  }
  // @@protoc_insertion_point(field_mutable:VidConf.VidViewWindow.cId)
  return cid_;
}
inline ::VidConf::VidCameraId* VidViewWindow::release_cid() {
  
  ::VidConf::VidCameraId* temp = cid_;
  cid_ = NULL;
  return temp;
}
inline void VidViewWindow::set_allocated_cid(::VidConf::VidCameraId* cid) {
  delete cid_;
  cid_ = cid;
  if (cid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidViewWindow.cId)
}

// optional int32 nWindowsId = 2;
inline void VidViewWindow::clear_nwindowsid() {
  nwindowsid_ = 0;
}
inline ::google::protobuf::int32 VidViewWindow::nwindowsid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidViewWindow.nWindowsId)
  return nwindowsid_;
}
inline void VidViewWindow::set_nwindowsid(::google::protobuf::int32 value) {
  
  nwindowsid_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidViewWindow.nWindowsId)
}

// -------------------------------------------------------------------

// VidView

// optional string strId = 1;
inline void VidView::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidView::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidView.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidView.strId)
}
inline void VidView::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidView.strId)
}
inline void VidView::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidView.strId)
}
inline ::std::string* VidView::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidView.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidView::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidView.strId)
}

// optional string strName = 2;
inline void VidView::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidView::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidView.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidView.strName)
}
inline void VidView::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidView.strName)
}
inline void VidView::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidView.strName)
}
inline ::std::string* VidView::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidView.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidView::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidView.strName)
}

// repeated .VidConf.VidViewWindow cView = 3;
inline int VidView::cview_size() const {
  return cview_.size();
}
inline void VidView::clear_cview() {
  cview_.Clear();
}
inline const ::VidConf::VidViewWindow& VidView::cview(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidView.cView)
  return cview_.Get(index);
}
inline ::VidConf::VidViewWindow* VidView::mutable_cview(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidView.cView)
  return cview_.Mutable(index);
}
inline ::VidConf::VidViewWindow* VidView::add_cview() {
  // @@protoc_insertion_point(field_add:VidConf.VidView.cView)
  return cview_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidViewWindow >*
VidView::mutable_cview() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidView.cView)
  return &cview_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidViewWindow >&
VidView::cview() const {
  // @@protoc_insertion_point(field_list:VidConf.VidView.cView)
  return cview_;
}

// optional .VidConf.VidLayout cLayout = 4;
inline void VidView::clear_clayout() {
  clayout_ = 0;
}
inline ::VidConf::VidLayout VidView::clayout() const {
  // @@protoc_insertion_point(field_get:VidConf.VidView.cLayout)
  return static_cast< ::VidConf::VidLayout >(clayout_);
}
inline void VidView::set_clayout(::VidConf::VidLayout value) {
  
  clayout_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidView.cLayout)
}

// -------------------------------------------------------------------

// VidViewList

// repeated .VidConf.VidView cVidView = 1;
inline int VidViewList::cvidview_size() const {
  return cvidview_.size();
}
inline void VidViewList::clear_cvidview() {
  cvidview_.Clear();
}
inline const ::VidConf::VidView& VidViewList::cvidview(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidViewList.cVidView)
  return cvidview_.Get(index);
}
inline ::VidConf::VidView* VidViewList::mutable_cvidview(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidViewList.cVidView)
  return cvidview_.Mutable(index);
}
inline ::VidConf::VidView* VidViewList::add_cvidview() {
  // @@protoc_insertion_point(field_add:VidConf.VidViewList.cVidView)
  return cvidview_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidView >*
VidViewList::mutable_cvidview() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidViewList.cVidView)
  return &cvidview_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidView >&
VidViewList::cvidview() const {
  // @@protoc_insertion_point(field_list:VidConf.VidViewList.cVidView)
  return cvidview_;
}

// -------------------------------------------------------------------

// VidGroup

// optional string strId = 1;
inline void VidGroup::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidGroup::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidGroup.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidGroup.strId)
}
inline void VidGroup::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidGroup.strId)
}
inline void VidGroup::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidGroup.strId)
}
inline ::std::string* VidGroup::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidGroup.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidGroup::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidGroup.strId)
}

// optional string strName = 2;
inline void VidGroup::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidGroup::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidGroup.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidGroup.strName)
}
inline void VidGroup::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidGroup.strName)
}
inline void VidGroup::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidGroup.strName)
}
inline ::std::string* VidGroup::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidGroup.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidGroup::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidGroup.strName)
}

// repeated .VidConf.VidCameraId cGroup = 3;
inline int VidGroup::cgroup_size() const {
  return cgroup_.size();
}
inline void VidGroup::clear_cgroup() {
  cgroup_.Clear();
}
inline const ::VidConf::VidCameraId& VidGroup::cgroup(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidGroup.cGroup)
  return cgroup_.Get(index);
}
inline ::VidConf::VidCameraId* VidGroup::mutable_cgroup(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidGroup.cGroup)
  return cgroup_.Mutable(index);
}
inline ::VidConf::VidCameraId* VidGroup::add_cgroup() {
  // @@protoc_insertion_point(field_add:VidConf.VidGroup.cGroup)
  return cgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidCameraId >*
VidGroup::mutable_cgroup() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidGroup.cGroup)
  return &cgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidCameraId >&
VidGroup::cgroup() const {
  // @@protoc_insertion_point(field_list:VidConf.VidGroup.cGroup)
  return cgroup_;
}

// -------------------------------------------------------------------

// VidGroupList

// repeated .VidConf.VidGroup cVidGroup = 1;
inline int VidGroupList::cvidgroup_size() const {
  return cvidgroup_.size();
}
inline void VidGroupList::clear_cvidgroup() {
  cvidgroup_.Clear();
}
inline const ::VidConf::VidGroup& VidGroupList::cvidgroup(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidGroupList.cVidGroup)
  return cvidgroup_.Get(index);
}
inline ::VidConf::VidGroup* VidGroupList::mutable_cvidgroup(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidGroupList.cVidGroup)
  return cvidgroup_.Mutable(index);
}
inline ::VidConf::VidGroup* VidGroupList::add_cvidgroup() {
  // @@protoc_insertion_point(field_add:VidConf.VidGroupList.cVidGroup)
  return cvidgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidGroup >*
VidGroupList::mutable_cvidgroup() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidGroupList.cVidGroup)
  return &cvidgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidGroup >&
VidGroupList::cvidgroup() const {
  // @@protoc_insertion_point(field_list:VidConf.VidGroupList.cVidGroup)
  return cvidgroup_;
}

// -------------------------------------------------------------------

// VidEmapCamera

// optional .VidConf.VidCameraId cId = 1;
inline bool VidEmapCamera::has_cid() const {
  return !_is_default_instance_ && cid_ != NULL;
}
inline void VidEmapCamera::clear_cid() {
  if (GetArenaNoVirtual() == NULL && cid_ != NULL) delete cid_;
  cid_ = NULL;
}
inline const ::VidConf::VidCameraId& VidEmapCamera::cid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapCamera.cId)
  return cid_ != NULL ? *cid_ : *default_instance_->cid_;
}
inline ::VidConf::VidCameraId* VidEmapCamera::mutable_cid() {
  
  if (cid_ == NULL) {
    cid_ = new ::VidConf::VidCameraId;
  }
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmapCamera.cId)
  return cid_;
}
inline ::VidConf::VidCameraId* VidEmapCamera::release_cid() {
  
  ::VidConf::VidCameraId* temp = cid_;
  cid_ = NULL;
  return temp;
}
inline void VidEmapCamera::set_allocated_cid(::VidConf::VidCameraId* cid) {
  delete cid_;
  cid_ = cid;
  if (cid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidEmapCamera.cId)
}

// optional int32 x = 2;
inline void VidEmapCamera::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::x() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapCamera.x)
  return x_;
}
inline void VidEmapCamera::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidEmapCamera.x)
}

// optional int32 y = 3;
inline void VidEmapCamera::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::y() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapCamera.y)
  return y_;
}
inline void VidEmapCamera::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidEmapCamera.y)
}

// optional int32 w = 4;
inline void VidEmapCamera::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::w() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapCamera.w)
  return w_;
}
inline void VidEmapCamera::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidEmapCamera.w)
}

// optional int32 h = 5;
inline void VidEmapCamera::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::h() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapCamera.h)
  return h_;
}
inline void VidEmapCamera::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:VidConf.VidEmapCamera.h)
}

// -------------------------------------------------------------------

// VidEmap

// optional string strId = 1;
inline void VidEmap::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEmap::strid() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmap.strId)
  return strid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidEmap.strId)
}
inline void VidEmap::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidEmap.strId)
}
inline void VidEmap::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidEmap.strId)
}
inline ::std::string* VidEmap::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmap.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEmap::release_strid() {
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidEmap.strId)
}

// optional string strName = 2;
inline void VidEmap::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEmap::strname() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmap.strName)
  return strname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidEmap.strName)
}
inline void VidEmap::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidEmap.strName)
}
inline void VidEmap::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidEmap.strName)
}
inline ::std::string* VidEmap::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmap.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEmap::release_strname() {
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidEmap.strName)
}

// repeated .VidConf.VidEmapCamera cCamera = 3;
inline int VidEmap::ccamera_size() const {
  return ccamera_.size();
}
inline void VidEmap::clear_ccamera() {
  ccamera_.Clear();
}
inline const ::VidConf::VidEmapCamera& VidEmap::ccamera(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmap.cCamera)
  return ccamera_.Get(index);
}
inline ::VidConf::VidEmapCamera* VidEmap::mutable_ccamera(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmap.cCamera)
  return ccamera_.Mutable(index);
}
inline ::VidConf::VidEmapCamera* VidEmap::add_ccamera() {
  // @@protoc_insertion_point(field_add:VidConf.VidEmap.cCamera)
  return ccamera_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmapCamera >*
VidEmap::mutable_ccamera() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidEmap.cCamera)
  return &ccamera_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmapCamera >&
VidEmap::ccamera() const {
  // @@protoc_insertion_point(field_list:VidConf.VidEmap.cCamera)
  return ccamera_;
}

// optional string strMapFile = 4;
inline void VidEmap::clear_strmapfile() {
  strmapfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEmap::strmapfile() const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmap.strMapFile)
  return strmapfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_strmapfile(const ::std::string& value) {
  
  strmapfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidConf.VidEmap.strMapFile)
}
inline void VidEmap::set_strmapfile(const char* value) {
  
  strmapfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidConf.VidEmap.strMapFile)
}
inline void VidEmap::set_strmapfile(const char* value, size_t size) {
  
  strmapfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidConf.VidEmap.strMapFile)
}
inline ::std::string* VidEmap::mutable_strmapfile() {
  
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmap.strMapFile)
  return strmapfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEmap::release_strmapfile() {
  
  return strmapfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_allocated_strmapfile(::std::string* strmapfile) {
  if (strmapfile != NULL) {
    
  } else {
    
  }
  strmapfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmapfile);
  // @@protoc_insertion_point(field_set_allocated:VidConf.VidEmap.strMapFile)
}

// -------------------------------------------------------------------

// VidEmapList

// repeated .VidConf.VidEmap cVidEmap = 1;
inline int VidEmapList::cvidemap_size() const {
  return cvidemap_.size();
}
inline void VidEmapList::clear_cvidemap() {
  cvidemap_.Clear();
}
inline const ::VidConf::VidEmap& VidEmapList::cvidemap(int index) const {
  // @@protoc_insertion_point(field_get:VidConf.VidEmapList.cVidEmap)
  return cvidemap_.Get(index);
}
inline ::VidConf::VidEmap* VidEmapList::mutable_cvidemap(int index) {
  // @@protoc_insertion_point(field_mutable:VidConf.VidEmapList.cVidEmap)
  return cvidemap_.Mutable(index);
}
inline ::VidConf::VidEmap* VidEmapList::add_cvidemap() {
  // @@protoc_insertion_point(field_add:VidConf.VidEmapList.cVidEmap)
  return cvidemap_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmap >*
VidEmapList::mutable_cvidemap() {
  // @@protoc_insertion_point(field_mutable_list:VidConf.VidEmapList.cVidEmap)
  return &cvidemap_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidConf::VidEmap >&
VidEmapList::cvidemap() const {
  // @@protoc_insertion_point(field_list:VidConf.VidEmapList.cVidEmap)
  return cvidemap_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VidConf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::VidConf::CameraType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidConf::CameraType>() {
  return ::VidConf::CameraType_descriptor();
}
template <> struct is_proto_enum< ::VidConf::CameraConnectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidConf::CameraConnectType>() {
  return ::VidConf::CameraConnectType_descriptor();
}
template <> struct is_proto_enum< ::VidConf::VidLanguage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidConf::VidLanguage>() {
  return ::VidConf::VidLanguage_descriptor();
}
template <> struct is_proto_enum< ::VidConf::VidLayout> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidConf::VidLayout>() {
  return ::VidConf::VidLayout_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vidconf_2eproto__INCLUDED
